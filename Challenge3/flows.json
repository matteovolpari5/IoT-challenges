[
    {
        "id": "afcbda6ea2f30a8c",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9285e851e0e82508",
        "type": "inject",
        "z": "afcbda6ea2f30a8c",
        "name": "Inject (5 sec)",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 360,
        "y": 560,
        "wires": [
            [
                "63b33e41a3800c37"
            ]
        ]
    },
    {
        "id": "acd9aeb44ccb79c3",
        "type": "mqtt out",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "topic": "challenge3/id_generator",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "817ce920ac63bd5e",
        "x": 870,
        "y": 480,
        "wires": []
    },
    {
        "id": "c9854f931d74188b",
        "type": "mqtt in",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "topic": "challenge3/id_generator",
        "qos": "2",
        "datatype": "json",
        "broker": "817ce920ac63bd5e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "bba2a2c1ea924bb2"
            ]
        ]
    },
    {
        "id": "63b33e41a3800c37",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "Create payload ",
        "func": "let initializationCompleted = flow.get(\"initializationCompleted\") || false;\nif (!initializationCompleted) {\n    return null;    \n}\n\nvar id = Math.floor(Math.random() * 30000);\n\nvar timestamp = Math.floor(Date.now() / 1000);\nmsg.payload = {\n    id: id,\n    timestamp: timestamp\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 560,
        "wires": [
            [
                "acd9aeb44ccb79c3",
                "c8b6646c2a4304a7"
            ]
        ]
    },
    {
        "id": "420eb824698e2198",
        "type": "csv",
        "z": "afcbda6ea2f30a8c",
        "name": "id_log.csv",
        "spec": "rfc",
        "sep": ",",
        "hdrin": false,
        "hdrout": "once",
        "multi": "one",
        "ret": "\\r",
        "temp": "No.,ID,TIMESTAMP",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1080,
        "y": 640,
        "wires": [
            [
                "d0da1663a30d9575"
            ]
        ]
    },
    {
        "id": "d0da1663a30d9575",
        "type": "file",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "filename": "/Users/kevin/Desktop/id_log.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1350,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "c8b6646c2a4304a7",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "Add row number",
        "func": "var counter = context.get(\"row_count_id_log\") || 0;\ncounter++;\ncontext.set(\"row_count_id_log\", counter);\nvar id = msg.payload[\"id\"];\nvar timestamp = msg.payload[\"timestamp\"];\nmsg.payload = {\n    \"No.\" : counter,\n    \"ID\" : id,\n    \"TIMESTAMP\": timestamp\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 640,
        "wires": [
            [
                "420eb824698e2198"
            ]
        ]
    },
    {
        "id": "bba2a2c1ea924bb2",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "Compute N",
        "func": "var processedMessages = context.get(\"processedMessages\") || 0;\nprocessedMessages ++;\ncontext.set(\"processedMessages\", processedMessages);\nif (processedMessages > 80) {\n    return null;\n}\n\nvar id = msg.payload[\"id\"];\nvar N = id % 7711;\n\nconsole.log(N);\n\n// saved id and N\nmsg.id = id;\nmsg.N = N;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1220,
        "wires": [
            [
                "be19fed2845e1ae4"
            ]
        ]
    },
    {
        "id": "be19fed2845e1ae4",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "Select message N",
        "func": "if (msg.N === 0) {\n  return null;\n}\n\nlet rows = flow.get(\"csv_challenge3\");\n\nif (!rows) {\n  console.log(\"NULL ROWS \")\n  return null;\n}\n\nlet target = rows.find(r =>\n  parseInt(r[\"No.\"], 10) === msg.N\n);\nmsg.payload = target;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1220,
        "wires": [
            [
                "6e80a21452311000",
                "fbac2dd43f7b3dec",
                "08e9bfbe5554e2ef"
            ]
        ]
    },
    {
        "id": "a2056aac740bfc31",
        "type": "debug",
        "z": "afcbda6ea2f30a8c",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 860,
        "wires": []
    },
    {
        "id": "68bc1dc7baea2f22",
        "type": "delay",
        "z": "afcbda6ea2f30a8c",
        "name": "Message Rate Limiter",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "4",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1480,
        "y": 1020,
        "wires": [
            [
                "3f74b895ebcf2d47",
                "ac143c4e712c48bf",
                "2ee9c102e406e4dd",
                "a2056aac740bfc31"
            ]
        ]
    },
    {
        "id": "ac143c4e712c48bf",
        "type": "mqtt out",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "817ce920ac63bd5e",
        "x": 1710,
        "y": 1100,
        "wires": []
    },
    {
        "id": "3f74b895ebcf2d47",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "Filter temperature Fahrenheit",
        "func": "if (msg.payload.payload.type === \"temperature\" && msg.payload.payload.unit === \"F\") {\n    let minTemp = msg.payload.payload.range[0];    \n    let maxTemp = msg.payload.payload.range[1];\n    let avgTemp = (minTemp + maxTemp)/2;\n    \n    msg.topic = \"TempF\";\n    msg.payload = avgTemp;\n    return msg;\n}\nreturn null\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 940,
        "wires": [
            [
                "0ef560b72d8f3e06"
            ]
        ]
    },
    {
        "id": "0ef560b72d8f3e06",
        "type": "ui_chart",
        "z": "afcbda6ea2f30a8c",
        "name": "Average temperature (F) chart",
        "group": "dbeb544f78cf351e",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Average temperature (F)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2110,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "428c51151d4c2e89",
        "type": "csv",
        "z": "afcbda6ea2f30a8c",
        "name": "filtered_pubs.csv",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\r",
        "temp": "No.,LONG,LAT,MEAN_VALUE,TYPE,UNIT,DESCRIPTION",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1990,
        "y": 1020,
        "wires": [
            [
                "901572c46913ba6f"
            ]
        ]
    },
    {
        "id": "2ee9c102e406e4dd",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "csv constructor",
        "func": "if (msg.payload.payload.type === \"temperature\" && msg.payload.payload.unit === \"F\") {\n    var counter = context.get(\"row_count_filtered_pubs\") || 0;\n    counter++;\n    context.set(\"row_count_filtered_pubs\", counter);\n\n    let data = msg.payload.payload;\n    let meanValue = (data.range[0] + data.range[1]) / 2;\n    let long = data.long;\n    let lat = data.lat;\n    let type = data.type;\n    let unit = data.unit;\n    let desc = data.description;\n    msg.payload = {\n        \"No.\" : counter,\n        \"LONG\": long,\n        \"LAT\": lat,\n        \"MEAN_VALUE\": meanValue,\n        \"TYPE\": type,\n        \"UNIT\": unit,\n        \"DESCRIPTION\": desc\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 1020,
        "wires": [
            [
                "428c51151d4c2e89"
            ]
        ]
    },
    {
        "id": "901572c46913ba6f",
        "type": "file",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "filename": "/Users/kevin/Desktop/filtered_pubs.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2320,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "6e80a21452311000",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "Handle MQTT ACK",
        "func": "if (msg.payload[\"Protocol\"] === \"MQTT\" && msg.payload[\"Info\"].includes(\"Ack\")) {\n    var counter = context.get(\"row_count_ack_log\") || 0;\n    counter++;\n    context.set(\"row_count_ack_log\", counter);\n\n    var currTimestamp = Math.floor(Date.now() / 1000);\n    let idMatch = msg.id;\n    var type = \"\";\n    if (msg.payload[\"Info\"].includes(\"Connect Ack\")) {\n        type = \"Connect Ack\";\n    } else if (msg.payload[\"Info\"].includes(\"Publish Ack\")){\n        type = \"Publish Ack\";\n    } else if (msg.payload[\"Info\"].includes(\"Subscribe Ack\")) {\n        type = \"Subscribe Ack\";\n    }\n    //console.log(msg.payload);\n    msg.payload = {\n        \"No.\": counter,\n        \"TIMESTAMP\": currTimestamp,\n        \"SUB_ID\": idMatch,\n        \"MSG_TYPE\": type\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1220,
        "wires": [
            [
                "31490941d656b056",
                "f4a9f4c3566fea93"
            ]
        ]
    },
    {
        "id": "31490941d656b056",
        "type": "csv",
        "z": "afcbda6ea2f30a8c",
        "name": "ack_log.csv",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\r",
        "temp": "No.,TIMESTAMP,SUB_ID,MSG_TYPE",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1370,
        "y": 1180,
        "wires": [
            [
                "6934172924a95d65"
            ]
        ]
    },
    {
        "id": "6934172924a95d65",
        "type": "file",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "filename": "/Users/kevin/Desktop/ack_log.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1660,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "fbac2dd43f7b3dec",
        "type": "debug",
        "z": "afcbda6ea2f30a8c",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1380,
        "wires": []
    },
    {
        "id": "f4a9f4c3566fea93",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "Prepare HTTP GET",
        "func": "var API_KEY=\"ZDZ3WHERCF259OFD\"\nvar globalCounter = msg.payload[\"No.\"]\n\nmsg.method = \"GET\";\nmsg.url = \"https://api.thingspeak.com/update?api_key=\"+API_KEY+\"&field1=\"+globalCounter\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1260,
        "wires": [
            [
                "21975235a525f08b"
            ]
        ]
    },
    {
        "id": "21975235a525f08b",
        "type": "http request",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1630,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "df9744cf42adf706",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "Prepare DELETE",
        "func": "// Code added here will be run once\n// whenever the node is started.\nvar channelID = 2924504;\nvar USER_API_KEY = \"F96QKIB7FK3F5KVG\"\n\nmsg.method = \"DELETE\";\n//msg.headers['Host'] = 'api.thingskpeak.com'\nmsg.payload = \"api_key=\" + encodeURIComponent(\"F96QKIB7FK3F5KVG\");\nmsg.headers = msg.headers || {};\nmsg.headers['Content-Type'] = 'application/x-www-form-urlencoded';\nmsg.url = \"https://api.thingspeak.com/channels/\" + channelID + \"/feeds.json\";\n//msg.payload = \"api_key=\" + USER_API_KEY;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 160,
        "wires": [
            [
                "0487687b0e74ada3"
            ]
        ]
    },
    {
        "id": "0487687b0e74ada3",
        "type": "http request",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 790,
        "y": 160,
        "wires": [
            [
                "37698f5314761195"
            ]
        ]
    },
    {
        "id": "4f82dd26f0946db0",
        "type": "inject",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "df9744cf42adf706",
                "41a3987b86141b95",
                "4bea1997ec1ec6bd",
                "29d1fd6b2a36a899",
                "b5103b694b932429"
            ]
        ]
    },
    {
        "id": "41a3987b86141b95",
        "type": "file in",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "filename": "/Users/kevin/Desktop/challenge3.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "b61a75564105e2e4"
            ]
        ]
    },
    {
        "id": "b61a75564105e2e4",
        "type": "csv",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 890,
        "y": 100,
        "wires": [
            [
                "b9cf690c7718fbae"
            ]
        ]
    },
    {
        "id": "4bea1997ec1ec6bd",
        "type": "file",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "filename": "/Users/kevin/Desktop/id_log.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 590,
        "y": 220,
        "wires": [
            [
                "37698f5314761195"
            ]
        ]
    },
    {
        "id": "29d1fd6b2a36a899",
        "type": "file",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "filename": "/Users/kevin/Desktop/filtered_pubs.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 620,
        "y": 280,
        "wires": [
            [
                "37698f5314761195"
            ]
        ]
    },
    {
        "id": "b5103b694b932429",
        "type": "file",
        "z": "afcbda6ea2f30a8c",
        "name": "",
        "filename": "/Users/kevin/Desktop/ack_log.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 340,
        "wires": [
            [
                "37698f5314761195"
            ]
        ]
    },
    {
        "id": "37698f5314761195",
        "type": "join",
        "z": "afcbda6ea2f30a8c",
        "name": "Initialization completed",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1350,
        "y": 220,
        "wires": [
            [
                "a2f3684812db32b8"
            ]
        ]
    },
    {
        "id": "b9cf690c7718fbae",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "Save CSV",
        "func": "flow.set(\"csv_challenge3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 100,
        "wires": [
            [
                "37698f5314761195"
            ]
        ]
    },
    {
        "id": "a2f3684812db32b8",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "Set initialization completed",
        "func": "flow.set(\"initializationCompleted\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "08e9bfbe5554e2ef",
        "type": "function",
        "z": "afcbda6ea2f30a8c",
        "name": "Handle PUBLISH message",
        "func": "if (msg.payload[\"Protocol\"] === \"MQTT\" && msg.payload[\"Info\"].includes(\"Publish Message\")) {\n    // save info in a variable\n    let info = msg.payload[\"Info\"];\n    // save messages payloads in a variable\n    let messagesPayloads = msg.payload[\"Payload\"] ?? \"\";\n\n    // extract topics\n    let topicMatches = [...info.matchAll(/Publish Message \\[([^\\]]+)\\]/g)];\n    let topics = topicMatches.map(m => m[1]);\n\n    // extract payloads\n    let jsonArray;\n    if (messagesPayloads.trim() === \"\") {\n        jsonArray = [];\n    } else {\n        try {\n            jsonArray = JSON.parse(\"[\" + messagesPayloads + \"]\");\n        } catch (e) {\n            // extract well formed messages\n\n            const objs = [];\n            const objRegex = /\\{[^}]*\\}/g;\n            let m;\n            while ((m = objRegex.exec(messagesPayloads)) !== null) {\n                try {\n                objs.push(JSON.parse(m));\n                } catch (_) {\n                    // skip malformed object\n                }\n            }\n            jsonArray = objs;\n        }\n    }\n\n    // create messages \n    var currTimestamp = Math.floor(Date.now() / 1000);\n    let messages = topics.map((topic, index) => {\n        return {\n            topic: topic, \n            payload: {\n                timestamp: currTimestamp.toString(),\n                id: msg.id.toString(),\n                topic: topic,\n                payload: jsonArray[index] ?? {}\n            }\n        };\n    });\n    \n    return [messages];\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1100,
        "wires": [
            [
                "68bc1dc7baea2f22"
            ]
        ]
    },
    {
        "id": "817ce920ac63bd5e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1884",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "dbeb544f78cf351e",
        "type": "ui_group",
        "name": "Default",
        "tab": "4b65753f2616bdcc",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "4b65753f2616bdcc",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]