[
    {
        "id": "594adea8ad84415a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e0d63211d6d32cd4",
        "type": "inject",
        "z": "594adea8ad84415a",
        "name": "Inject (5 sec)",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "46bc8f1e4b6a1fca"
            ]
        ]
    },
    {
        "id": "78c5523772376a37",
        "type": "mqtt out",
        "z": "594adea8ad84415a",
        "name": "",
        "topic": "challenge3/id_generator",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "817ce920ac63bd5e",
        "x": 630,
        "y": 120,
        "wires": []
    },
    {
        "id": "eaf923d06272770e",
        "type": "mqtt in",
        "z": "594adea8ad84415a",
        "name": "",
        "topic": "challenge3/id_generator",
        "qos": "2",
        "datatype": "json",
        "broker": "817ce920ac63bd5e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 520,
        "wires": [
            [
                "4ffcbe3e921f524e"
            ]
        ]
    },
    {
        "id": "46bc8f1e4b6a1fca",
        "type": "function",
        "z": "594adea8ad84415a",
        "name": "Create payload ",
        "func": "var id = Math.floor(Math.random() * 30000);\n\nvar timestamp = Math.floor(Date.now() / 1000)\n\nmsg.payload = {\n    id: id,\n    timestamp: timestamp\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 200,
        "wires": [
            [
                "78c5523772376a37",
                "24d54877dd442cca"
            ]
        ]
    },
    {
        "id": "0834e6c30bf8386b",
        "type": "csv",
        "z": "594adea8ad84415a",
        "name": "id_log.csv",
        "spec": "rfc",
        "sep": ",",
        "hdrin": false,
        "hdrout": "once",
        "multi": "one",
        "ret": "\\r",
        "temp": "No.,ID,TIMESTAMP",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 820,
        "y": 280,
        "wires": [
            [
                "0e2801026d547747"
            ]
        ]
    },
    {
        "id": "0e2801026d547747",
        "type": "file",
        "z": "594adea8ad84415a",
        "name": "",
        "filename": "/Users/kevin/Desktop/id_log.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1090,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "24d54877dd442cca",
        "type": "function",
        "z": "594adea8ad84415a",
        "name": "Add row number",
        "func": "var counter = context.get(\"row_count\") || 0;\ncounter++;\ncontext.set(\"row_count\", counter);\nvar id = msg.payload[\"id\"]\nvar timestamp = msg.payload[\"timestamp\"]\nmsg.payload = {\n    \"No.\" : counter,\n    \"ID\" : id,\n    \"TIMESTAMP\": timestamp\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "0834e6c30bf8386b"
            ]
        ]
    },
    {
        "id": "4ffcbe3e921f524e",
        "type": "function",
        "z": "594adea8ad84415a",
        "name": "Compute N",
        "func": "var id = msg.payload[\"id\"]\nvar N = id % 7711\n\n// saved id and N\nmsg.id = id\nmsg.N = N\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 520,
        "wires": [
            [
                "8eb892909f24cdd1"
            ]
        ]
    },
    {
        "id": "8eb892909f24cdd1",
        "type": "file in",
        "z": "594adea8ad84415a",
        "name": "",
        "filename": "/Users/kevin/Desktop/challenge3.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 730,
        "y": 520,
        "wires": [
            [
                "84bceed2d1d0efbd"
            ]
        ]
    },
    {
        "id": "84bceed2d1d0efbd",
        "type": "csv",
        "z": "594adea8ad84415a",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1010,
        "y": 520,
        "wires": [
            [
                "9d5a98e588e04d79"
            ]
        ]
    },
    {
        "id": "9d5a98e588e04d79",
        "type": "function",
        "z": "594adea8ad84415a",
        "name": "Select message N",
        "func": "if (msg.N === 0) {\n  return null;\n}\n\nlet rows = msg.payload;\nlet target = rows.find(r =>\n  parseInt(r[\"No.\"], 10) === msg.N\n);\nmsg.payload = target;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 520,
        "wires": [
            [
                "e97a2bd7b997c41f"
            ]
        ]
    },
    {
        "id": "44793351c8714ff4",
        "type": "debug",
        "z": "594adea8ad84415a",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 760,
        "wires": []
    },
    {
        "id": "e97a2bd7b997c41f",
        "type": "function",
        "z": "594adea8ad84415a",
        "name": "Handle PUBLISH message",
        "func": "if (msg.payload[\"Protocol\"] === \"MQTT\" && msg.payload[\"Info\"].includes(\"Publish Message\")) {\n    // save info in a variable\n    let info = msg.payload[\"Info\"];\n    // save messages payloads in a variable\n    let messagesPayloads = msg.payload[\"Payload\"] ?? \"\";\n\n    // extract topics\n    let topicMatches = [...info.matchAll(/Publish Message \\[([^\\]]+)\\]/g)];\n    let topics = topicMatches.map(m => m[1]);\n\n    // extract payloads\n    let jsonArray;\n    if (messagesPayloads.trim() === \"\") {\n        jsonArray = [];\n    } else {\n        jsonArray = JSON.parse(\"[\" + messagesPayloads + \"]\");\n    }\n\n    // create messages \n    var currTimestamp = Math.floor(Date.now() / 1000)\n    let messages = topics.map((topic, index) => {\n        return {\n            topic: topic, \n            payload: {\n                timestamp: currTimestamp,\n                id: msg.id,\n                topic: topic,\n                payload: jsonArray[index] ?? {}\n            }\n        };\n    });\n    \n    console.log(msg.payload[\"No.\"])\n    //console.log(messages);\n\n    return [messages];\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 600,
        "wires": [
            [
                "88cc2ef1a409d493"
            ]
        ]
    },
    {
        "id": "88cc2ef1a409d493",
        "type": "delay",
        "z": "594adea8ad84415a",
        "name": "Message Rate Limiter",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "4",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1820,
        "y": 600,
        "wires": [
            [
                "0afc508775a06d57",
                "44793351c8714ff4",
                "e41849ca2226101f"
            ]
        ]
    },
    {
        "id": "0afc508775a06d57",
        "type": "mqtt out",
        "z": "594adea8ad84415a",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "817ce920ac63bd5e",
        "x": 2050,
        "y": 660,
        "wires": []
    },
    {
        "id": "e41849ca2226101f",
        "type": "function",
        "z": "594adea8ad84415a",
        "name": "Filter temperature Fahrenheit",
        "func": "if (msg.payload.payload.type === \"temperature\" && msg.payload.payload.unit === \"F\") {\n    let minTemp = msg.payload.payload.range[0];    \n    let maxTemp = msg.payload.payload.range[1];\n    let avgTemp = (minTemp + maxTemp)/2;\n    \n    msg.topic = \"TempF\";\n    msg.payload = avgTemp;\n    return msg;\n}\nreturn null\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 540,
        "wires": [
            [
                "3961b5c177be6539"
            ]
        ]
    },
    {
        "id": "3961b5c177be6539",
        "type": "ui_chart",
        "z": "594adea8ad84415a",
        "name": "Average temperature (F) chart",
        "group": "f283b49f624c2d97",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Average temperature (F)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2450,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "817ce920ac63bd5e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1884",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f283b49f624c2d97",
        "type": "ui_group",
        "name": "Default",
        "tab": "56facb5b656f85a7",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "56facb5b656f85a7",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]