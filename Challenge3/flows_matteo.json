[
    {
        "id": "8a53b737ca7cab5c",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "602fc0caa2205ff5",
        "type": "inject",
        "z": "8a53b737ca7cab5c",
        "name": "Inject (5 sec)",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "270208669f76d9b2"
            ]
        ]
    },
    {
        "id": "bf8970ca0c4b3259",
        "type": "mqtt out",
        "z": "8a53b737ca7cab5c",
        "name": "",
        "topic": "challenge3/id_generator",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "817ce920ac63bd5e",
        "x": 630,
        "y": 120,
        "wires": []
    },
    {
        "id": "0c0b2c5f0a8ccf79",
        "type": "mqtt in",
        "z": "8a53b737ca7cab5c",
        "name": "",
        "topic": "challenge3/id_generator",
        "qos": "2",
        "datatype": "json",
        "broker": "817ce920ac63bd5e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 520,
        "wires": [
            [
                "d397d8440b76cd1e"
            ]
        ]
    },
    {
        "id": "270208669f76d9b2",
        "type": "function",
        "z": "8a53b737ca7cab5c",
        "name": "Create payload ",
        "func": "var id = Math.floor(Math.random() * 30000);\n\nvar timestamp = Math.floor(Date.now() / 1000)\n\nmsg.payload = {\n    id: id,\n    timestamp: timestamp\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 200,
        "wires": [
            [
                "bf8970ca0c4b3259",
                "74197f775ded296b"
            ]
        ]
    },
    {
        "id": "e805f45c588c1b4c",
        "type": "csv",
        "z": "8a53b737ca7cab5c",
        "name": "id_log.csv",
        "spec": "rfc",
        "sep": ",",
        "hdrin": false,
        "hdrout": "once",
        "multi": "one",
        "ret": "\\r",
        "temp": "No.,ID,TIMESTAMP",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 820,
        "y": 280,
        "wires": [
            [
                "44423b53d42d6921"
            ]
        ]
    },
    {
        "id": "44423b53d42d6921",
        "type": "file",
        "z": "8a53b737ca7cab5c",
        "name": "",
        "filename": "/Users/matteovolpari/Desktop/id_log.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1120,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "74197f775ded296b",
        "type": "function",
        "z": "8a53b737ca7cab5c",
        "name": "Add row number",
        "func": "var counter = context.get(\"row_count_id_log\") || 0;\ncounter++;\ncontext.set(\"row_count_id_log\", counter);\nvar id = msg.payload[\"id\"]\nvar timestamp = msg.payload[\"timestamp\"]\nmsg.payload = {\n    \"No.\" : counter,\n    \"ID\" : id,\n    \"TIMESTAMP\": timestamp\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "e805f45c588c1b4c"
            ]
        ]
    },
    {
        "id": "d397d8440b76cd1e",
        "type": "function",
        "z": "8a53b737ca7cab5c",
        "name": "Compute N",
        "func": "var id = msg.payload[\"id\"]\nvar N = id % 7711\n\n// saved id and N\nmsg.id = id\nmsg.N = N\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 520,
        "wires": [
            [
                "2574d29686f16bee"
            ]
        ]
    },
    {
        "id": "2574d29686f16bee",
        "type": "file in",
        "z": "8a53b737ca7cab5c",
        "name": "",
        "filename": "/Users/matteovolpari/Desktop/challenge3.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 760,
        "y": 520,
        "wires": [
            [
                "f1922ad1490f0015"
            ]
        ]
    },
    {
        "id": "f1922ad1490f0015",
        "type": "csv",
        "z": "8a53b737ca7cab5c",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1030,
        "y": 520,
        "wires": [
            [
                "afc49d3f77ca0ab5"
            ]
        ]
    },
    {
        "id": "afc49d3f77ca0ab5",
        "type": "function",
        "z": "8a53b737ca7cab5c",
        "name": "Select message N",
        "func": "if (msg.N === 0) {\n  return null;\n}\n\nlet rows = msg.payload;\nlet target = rows.find(r =>\n  parseInt(r[\"No.\"], 10) === msg.N\n);\nmsg.payload = target;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 520,
        "wires": [
            [
                "a0e61e45c9075fb9",
                "d346822b38d3110a"
            ]
        ]
    },
    {
        "id": "8a8a2c46daeeacef",
        "type": "debug",
        "z": "8a53b737ca7cab5c",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 540,
        "wires": []
    },
    {
        "id": "a0e61e45c9075fb9",
        "type": "function",
        "z": "8a53b737ca7cab5c",
        "name": "Handle PUBLISH message",
        "func": "if (msg.payload[\"Protocol\"] === \"MQTT\" && msg.payload[\"Info\"].includes(\"Publish Message\")) {\n    // save info in a variable\n    let info = msg.payload[\"Info\"];\n    // save messages payloads in a variable\n    let messagesPayloads = msg.payload[\"Payload\"] ?? \"\";\n\n    // extract topics\n    let topicMatches = [...info.matchAll(/Publish Message \\[([^\\]]+)\\]/g)];\n    let topics = topicMatches.map(m => m[1]);\n\n    // extract payloads\n    let jsonArray;\n    if (messagesPayloads.trim() === \"\") {\n        jsonArray = [];\n    } else {\n        jsonArray = JSON.parse(\"[\" + messagesPayloads + \"]\");\n    }\n\n    // create messages \n    var currTimestamp = Math.floor(Date.now() / 1000)\n    let messages = topics.map((topic, index) => {\n        return {\n            topic: topic, \n            payload: {\n                timestamp: currTimestamp,\n                id: msg.id,\n                topic: topic,\n                payload: jsonArray[index] ?? {}\n            }\n        };\n    });\n    \n    //console.log(msg.payload[\"No.\"])\n    //console.log(messages);\n\n    return [messages];\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 380,
        "wires": [
            [
                "46c8f2f85ba18fdd"
            ]
        ]
    },
    {
        "id": "46c8f2f85ba18fdd",
        "type": "delay",
        "z": "8a53b737ca7cab5c",
        "name": "Message Rate Limiter",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "4",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1840,
        "y": 380,
        "wires": [
            [
                "ba2c86ee0085d2df",
                "8a8a2c46daeeacef",
                "8090a181484e8831",
                "464577b5ffc3c031"
            ]
        ]
    },
    {
        "id": "ba2c86ee0085d2df",
        "type": "mqtt out",
        "z": "8a53b737ca7cab5c",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "817ce920ac63bd5e",
        "x": 2070,
        "y": 440,
        "wires": []
    },
    {
        "id": "8090a181484e8831",
        "type": "function",
        "z": "8a53b737ca7cab5c",
        "name": "Filter temperature Fahrenheit",
        "func": "if (msg.payload.payload.type === \"temperature\" && msg.payload.payload.unit === \"F\") {\n    let minTemp = msg.payload.payload.range[0];    \n    let maxTemp = msg.payload.payload.range[1];\n    let avgTemp = (minTemp + maxTemp)/2;\n    \n    msg.topic = \"TempF\";\n    msg.payload = avgTemp;\n    return msg;\n}\nreturn null\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 320,
        "wires": [
            [
                "bdef32ede9da4186"
            ]
        ]
    },
    {
        "id": "bdef32ede9da4186",
        "type": "ui_chart",
        "z": "8a53b737ca7cab5c",
        "name": "Average temperature (F) chart",
        "group": "e72c9f65b2fba0a6",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Average temperature (F)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2470,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "64650c647d274aa0",
        "type": "csv",
        "z": "8a53b737ca7cab5c",
        "name": "filtered_pubs.csv",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\r",
        "temp": "No.,LONG,LAT,MEAN_VALUE,TYPE,UNIT,DESCRIPTION",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2690,
        "y": 380,
        "wires": [
            [
                "fa20087deb8e3b30"
            ]
        ]
    },
    {
        "id": "464577b5ffc3c031",
        "type": "function",
        "z": "8a53b737ca7cab5c",
        "name": "csv constructor",
        "func": "if (msg.payload.payload.type === \"temperature\" && msg.payload.payload.unit === \"F\") {\nvar counter = context.get(\"row_count_filtered_pubs\") || 0;\ncounter++;\ncontext.set(\"row_count_filtered_pubs\", counter);\n\nlet data = msg.payload.payload;\nlet meanValue = (data.range[0] + data.range[1]) / 2;\nlet long = data.long;\nlet lat = data.lat;\nlet type = data.type;\nlet unit = data.unit;\nlet desc = data.description;\nmsg.payload = {\n    \"No.\" : counter,\n    \"LONG\": long,\n    \"LAT\": lat,\n    \"MEAN_VALUE\": meanValue,\n    \"TYPE\": type,\n    \"UNIT\": unit,\n    \"DESCRIPTION\": desc\n}\nreturn msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 380,
        "wires": [
            [
                "64650c647d274aa0"
            ]
        ]
    },
    {
        "id": "fa20087deb8e3b30",
        "type": "file",
        "z": "8a53b737ca7cab5c",
        "name": "",
        "filename": "/Users/matteovolpari/Desktop/filtered_pubs.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 3040,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "d346822b38d3110a",
        "type": "function",
        "z": "8a53b737ca7cab5c",
        "name": "Handle MQTT ACK",
        "func": "if (msg.payload[\"Protocol\"] === \"MQTT\" && msg.payload[\"Info\"].includes(\"Ack\")) {\n    var counter = context.get(\"row_count_ack_log\") || 0;\n    counter++;\n    context.set(\"row_count_ack_log\", counter);\n\n    var currTimestamp = Math.floor(Date.now() / 1000);\n    let idMatch = msg.payload[\"Info\"].match(/id\\s*=\\s*(\\d+)/);\n    let extractedId = idMatch ? parseInt(idMatch[1]) : null;\n    var type = \"\";\n    if (msg.payload[\"Info\"].includes(\"Connect Ack\")) {\n        type = \"Connect Ack\"\n    }\n    else if (msg.payload[\"Info\"].includes(\"Publish Ack\")){\n        type = \"Publish Ack\"\n    }\n    else if (msg.payload[\"Info\"].includes(\"Subscribe Ack\")) {\n        type = \"Subscribe Ack\"\n    }\n    console.log(msg.payload);\n    msg.payload = {\n        \"No.\": counter,\n        \"TIMESTAMP\": currTimestamp,\n        \"SUB_ID\": extractedId,\n        \"MSG_TYPE\": type\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 700,
        "wires": [
            [
                "9488e1edaeb61a0a"
            ]
        ]
    },
    {
        "id": "9488e1edaeb61a0a",
        "type": "csv",
        "z": "8a53b737ca7cab5c",
        "name": "ack_log.csv",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\r",
        "temp": "No.,TIMESTAMP,SUB_ID,MSG_TYPE",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1750,
        "y": 700,
        "wires": [
            [
                "858f541541d55f80"
            ]
        ]
    },
    {
        "id": "858f541541d55f80",
        "type": "file",
        "z": "8a53b737ca7cab5c",
        "name": "",
        "filename": "/Users/matteovolpari/Desktop/ack_log.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2070,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "817ce920ac63bd5e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1884",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e72c9f65b2fba0a6",
        "type": "ui_group",
        "name": "Default",
        "tab": "577c11ae121663ae",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "577c11ae121663ae",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]